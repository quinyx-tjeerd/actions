name: "Build image"
description: "Docker image build and publish"
inputs:
  aws_region:
    description: Target AWS Region
    default: "eu-central-1"
  github_iam_role_arn:
    description: Name of the IAM Role for managing the Lambda Function, also needs to assume the terraform role
    default: "arn:aws:iam::488021763009:role/github-actions_lambda-function"
  q_service:
    description: Quinyx Service, like 'qwfmbackend' or 'security'
  function_image:
    description: Docker image
  tags:
    description: Tags to add to the function
  environment:
    description: Environment
  component:
    description: Component of service, like a sub division
    default: ""
  description:
    description: description of the function
    default: ""
  environment_variables:
    description: environment variables
    default: "{}"
  architectures:
    description: Instruction set architecture for your Lambda function. Valid values are ['x86_64'] and ['arm64'].
    default: '["arm64"]'
  memory_size:
    description: Memory size in mb (min 128, max 10240)
    default: "128"
  timeout:
    description: Timeout in seconds
    default: "3"
  vpc:
    description: whether this function should live within the vpc
    default: "false"
  iam_role_name:
    description: IAM role the lambda should be using
    default: ""
runs:
  using: "composite"
  steps:
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ inputs.github_iam_role_arn }}
        aws-region: ${{ inputs.aws_region }}

    - name: Manage Lambda Function
      uses: quinyx-tjeerd/actions/terraform-automated@main
      env:
        TF_VAR_region: ${{ inputs.aws_region }}
        TF_VAR_environment: ${{ inputs.environment }}
        TF_VAR_service: ${{ inputs.q_service }}
        TF_VAR_tags: ${{ inputs.tags }}
        TF_VAR_component: ${{ inputs.component }}
        TF_VAR_description: ${{ inputs.description }}
        TF_VAR_environment_variables: ${{ inputs.environment_variables }}
        TF_VAR_architectures: ${{ inputs.architectures }}
        TF_VAR_memory_size: ${{ inputs.memory_size }}
        TF_VAR_timeout: ${{ inputs.timeout }}
        TF_VAR_vpc: ${{ inputs.vpc == 'true' }}
        TF_VAR_image: ${{ inputs.function_image }}
        TF_VAR_iam_role_name: ${{ inputs.iam_role_name }}
      with:
        aws_region: ${{ inputs.aws_region }}
        aws_service: Lambda
        tf_state_prefix: ${{ format( '{0}{1}{2}', inputs.q_service, (inputs.component != '' && format('/{0}', inputs.component) || ''), inputs.environment) }}
        working-directory: ${{ github.action_path }}
