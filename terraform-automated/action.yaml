name: "Terraform Automated"
description: "Automatically initialize and apply terraform"
inputs:
  backend_iam_role_arn:
    description: ARN of the Terraform backend assumable IAM Role
    default: "arn:aws:iam::488021763009:role/github-actions_terraform-backend"
  aws_region:
    description: Target AWS Region
    default: "eu-central-1"
  aws_service:
    description: AWS Service, like ECR, Lambda etc (state bucket /automated/$aws_service)
  tf_state_prefix:
    description: Terraform state prefix in bucket (state bucket /automated/$aws_service/$tf_state_prefix), generally something like '$q_service/$q_component/$q_environment'
  working-directory:
    description: Specifies the working directory where the Terraform files are
outputs:
  json:
    description: "JSON"
    value: ${{ steps.tf-output.outputs.json }}
runs:
  using: "composite"
  steps:
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_wrapper: false

    - name: TF init
      shell: bash
      run: |
        set -eux
        terraform init -upgrade -reconfigure \
          -backend-config='skip_metadata_api_check=true' \
          -backend-config='skip_region_validation=true' \
          -backend-config='skip_credentials_validation=true' \
          -backend-config='region=${{ inputs.aws_region }}' \
          -backend-config='bucket=quinyx-terraform-state-${{ inputs.aws_region }}' \
          -backend-config='key=${{ format('automated/{0}/{1}/terraform.tfstate', inputs.aws_service, inputs.tf_state_prefix ) }}' \
          -backend-config='dynamodb_table=quinyx-terraform-locks-${{ inputs.aws_region }}' \
          -backend-config='role_arn=${{ inputs.backend_iam_role_arn }}'
      working-directory: ${{ inputs.working-directory }}

    - name: TF apply
      id: tf-apply
      shell: bash
      run: |
        set -eux
        terraform apply \
          -auto-approve
      working-directory: ${{ inputs.working-directory }}

    - name: TF Output
      id: tf-output
      shell: bash
      run: |
        set -eux
        DATA=$(terraform output -json | jq -c 'to_entries | [.[] | select(.value.sensitive==false) | {key, value: .value.value}] | from_entries')
        echo "json=$DATA" >> $GITHUB_OUTPUT
      working-directory: ${{ inputs.working-directory }}
