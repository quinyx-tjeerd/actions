name: "Terraform Automated"
description: "Automatically initialize and apply terraform"
inputs:
  backend_iam_role:
    description: Name of the Terraform backend assumable IAM Role
    default: "github-actions_terraform-backend"
  aws_account_id:
    description: AWS Account ID
  aws_region:
    description: Target AWS Region
    default: "eu-central-1"
  aws_service:
    description: AWS Service, like ECR, Lambda etc (state bucket /automated/$aws_service)
  q_service:
    description: Quinyx Service, like qwfmbackend, osrm etc (state bucket /automated/$aws_service/$q_service)
  q_component:
    description: Quinyx Service subdivision, will result in separate state (state bucket /automated/$aws_service/$q_service-$q_component)
    default: ""
  q_environment:
    description: Quinyx Environment, will result in separate state (state bucket /automated/$aws_service/$q_service-$q_component/$q_environment)
    default: ""
  working-directory:
    description: Specifies the working directory where the Terraform files are
runs:
  using: "composite"
  steps:
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_wrapper: false

    - name: TF init
      shell: bash
      run: |
        set -eux
        terraform init -upgrade -reconfigure \
          -backend-config='skip_metadata_api_check=true' \
          -backend-config='skip_region_validation=true' \
          -backend-config='skip_credentials_validation=true' \
          -backend-config='region=${{ inputs.aws_region }}' \
          -backend-config='bucket=quinyx-terraform-state-${{ inputs.aws_region }}' \
          -backend-config='key=${{ format('automated/{0}/{1}{2}{3}/terraform.tfstate', inputs.aws_service, inputs.q_service, (inputs.q_component != '' && format('-{0}', inputs.q_component) || ''), (inputs.q_environment != '' && format('/{0}', inputs.q_environment) || '') ) }}' \
          -backend-config='dynamodb_table=quinyx-terraform-locks-${{ inputs.aws_region }}' \
          -backend-config='role_arn=arn:aws:iam::${{ inputs.aws_account_id }}:role/${{ inputs.backend_iam_role }}'
      working-directory: ${{ inputs.working-directory }}

    - name: TF apply
      id: tf-apply
      shell: bash
      run: |
        set -eux
        terraform apply \
          -var 'aws_account_id=${{ inputs.aws_account_id }}' \
          -var 'service=${{ inputs.q_service }}' \
          -auto-approve
      working-directory: ${{ inputs.working-directory }}

    - name: TF Output
      id: tf-output
      shell: bash
      run: |
        set -eux
        echo "json=$(terraform output -json)" >> "$GITHUB_OUTPUT"
      working-directory: ${{ inputs.working-directory }}
