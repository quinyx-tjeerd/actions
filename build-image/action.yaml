name: "Build image"
description: "Docker image build and publish"
inputs:
  path_to_dockerfile:
    description: Path to the dockerfile (default = 'Dockerfile')
    default: "Dockerfile"
  docker_build_dir:
    description: Docker build directory (default = '.')
    default: "."
  image_name:
    description: Repo name of the images.
    required: true
  image_tag:
    description: Tag to apply to images.
    default: snapshot-artifact
  lifecycle_policy_file:
    description: Path to the lifecycle policy JSON file (default = 'policy.json')
    default: "policy.json"
  cache_lifecycle_policy_file:
    description: Path to the cache lifecycle policy JSON file (default = 'cache-policy.json')
    default: "cache-policy.json"
  backend_iam_role:
    description: Name of the Terraform backend assumable IAM Role
    default: "github-actions_terraform-backend"
  github_iam_role:
    description: Name of the IAM Role for adding access to ECR repo, also needs to assume the terraform role
    default: "github-actions_ecr"
  aws_account_id:
    description: AWS Account ID
  aws_region:
    description: Target AWS Region
    default: "eu-central-1"
  build_arguments:
    description: Build arguments to pass to the build
    default: ""
  cache:
    description: Enable Kaniko cache
    default: "true"
outputs:
  image_tag:
    description: "Digest"
    value: ${{ steps.build-publish.outputs.digest }}
  full_image:
    description: "Full image"
    value: ${{ steps.login-ecr.outputs.registry }}/${{ inputs.image_name }}@${{ steps.build-publish.outputs.digest }}
runs:
  using: "composite"
  steps:
    - uses: actions/checkout@v4
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::${{ inputs.aws_account_id }}:role/${{ inputs.github_iam_role }}
        aws-region: ${{ inputs.aws_region }}

    - name: Manage ECR
      uses: quinyx-tjeerd/actions/terraform-automated@main
      env:
        TF_VAR_repository_name: ${{ inputs.image_name }}
        TF_VAR_lifecycle_policy: ${{ inputs.lifecycle_policy_file }}
        TF_VAR_cache_lifecycle_policy: ${{ inputs.cache_lifecycle_policy_file }}
        TF_VAR_iam_role: arn:aws:iam::${{ inputs.aws_account_id }}:role/${{ inputs.github_iam_role }}
      with:
        backend_iam_role: ${{ inputs.backend_iam_role }}
        aws_account_id: ${{ inputs.aws_account_id }}
        aws_region: ${{ inputs.aws_region }}
        aws_service: ECR
        q_service: ${{ inputs.image_name}}
        working-directory: ${{ github.action_path }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
      with:
        registries: ${{ inputs.aws_account_id }}
        mask-password: "true" # see: https://github.com/aws-actions/amazon-ecr-login#docker-credentials

    - uses: docker/metadata-action@v5
      id: metadata
      with:
        images: ${{ steps.login-ecr.outputs.registry }}/${{ inputs.image_name }}
        tags: |
          type=sha

    - name: Build and Publish
      id: build-publish
      uses: int128/kaniko-action@v1
      with:
        push: true
        tags: ${{ steps.metadata.outputs.tags }}
        labels: ${{ steps.metadata.outputs.labels }}
        cache: ${{ inputs.cache == 'true' }}
        cache-repository: ${{ steps.login-ecr.outputs.registry }}/${{ inputs.image_name }}/cache
        context: ${{ inputs.docker_build_dir }}
        file: ${{ inputs.docker_build_dir }}/${{ inputs.path_to_dockerfile }}
        build-args: ${{ inputs.build_arguments }}
        kaniko-args: --cache-dir=/githubrunner/kaniko/cache
